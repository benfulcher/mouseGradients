function [T1T2LayerTable,layerLabels] = ImportT1T2ByLayer(whatFilter)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   T1T2ABACORTEXLAYERS = IMPORTFILE(FILENAME) Reads data from text file
%   FILENAME for the default selection.
%
%   T1T2ABACORTEXLAYERS = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data
%   from rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   T1T2ABAcortexLayers = importfile('T1T2_ABAcortexLayers.csv', 2, 215);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2018/03/28 11:14:48


%% Initialize variables.
if nargin < 1
    whatFilter = 'ABAcortex';
end
fileName = 'T1T2_ABAcortexLayers.csv';
delimiter = ',';
startRow = 2;
endRow = Inf;

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%q%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(fileName,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,9,10,11,14]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;

            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end

%===============================================================================
%% Split data into numeric and string columns.
rawNumericColumns = raw(:, [1,2,9,10,11,14]);
rawStringColumns = string(raw(:, [3,4,5,6,7,8,12,13]));

%% Create output variable
T1T2LayerTable = table;
T1T2LayerTable.index = cell2mat(rawNumericColumns(:, 1));
T1T2LayerTable.id = cell2mat(rawNumericColumns(:, 2));
T1T2LayerTable.acronym = rawStringColumns(:, 1);
T1T2LayerTable.name = rawStringColumns(:, 2);
T1T2LayerTable.T1 = cell2mat(rawNumericColumns(:, 3));
T1T2LayerTable.T2 = cell2mat(rawNumericColumns(:, 4));
T1T2LayerTable.ratio = cell2mat(rawNumericColumns(:, 5));
T1T2LayerTable.T1T2 = cell2mat(rawNumericColumns(:, 6));

% T1T2LayerTable.VarName5 = rawStringColumns(:, 3);
% T1T2LayerTable.VarName6 = rawStringColumns(:, 4);
% T1T2LayerTable.VarName7 = rawStringColumns(:, 5);
% T1T2LayerTable.VarName8 = rawStringColumns(:, 6);
% T1T2LayerTable.VarName12 = rawStringColumns(:, 7);
% T1T2LayerTable.VarName13 = rawStringColumns(:, 8);
%-------------------------------------------------------------------------------

%-------------------------------------------------------------------------------
% Add cell count information (from CUBIC):
% Murakami et al. (2018). A three-dimensional single-cell-resolution whole-brain
% atlas using CUBIC-X expansion microscopy and tissue clearing. Nature Neuroscience
% 21(4), 625. http://doi.org/10.1038/s41593-018-0109-1
%-------------------------------------------------------------------------------
T1T2LayerTable.cellCount = GiveMeCellCount(T1T2LayerTable.id);

%-------------------------------------------------------------------------------
% Additional filter on structures:
T1T2LayerTable = StructureFilter(T1T2LayerTable,whatFilter);

%-------------------------------------------------------------------------------
% Annotate layers:
[T1T2LayerTable,layerLabels] = FilterGenesByLayer(T1T2LayerTable);

end
